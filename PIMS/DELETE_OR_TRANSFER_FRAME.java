package pimsgui;

import javax.swing.JOptionPane;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

/**
 *
 * @author COMPUTER
 */
public class DELETE_OR_TRANSFER_FRAME extends javax.swing.JFrame {

    /**
     * Creates new form DELETE_OR_TRANSFER_FRAME
     */
    public DELETE_OR_TRANSFER_FRAME() {
        initComponents();
         this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        delete_but = new javax.swing.JButton();
        transfer_but = new javax.swing.JButton();
        back_butt = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 51, 204));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 256, Short.MAX_VALUE)
        );

        jPanel2.setBackground(new java.awt.Color(0, 51, 204));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 22, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 26, Short.MAX_VALUE)
        );

        delete_but.setBackground(new java.awt.Color(0, 51, 204));
        delete_but.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        delete_but.setForeground(new java.awt.Color(255, 255, 255));
        delete_but.setText(" TO DELETE");
        delete_but.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_butActionPerformed(evt);
            }
        });

        transfer_but.setBackground(new java.awt.Color(0, 51, 204));
        transfer_but.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        transfer_but.setForeground(new java.awt.Color(255, 255, 255));
        transfer_but.setText("TRANSFER");
        transfer_but.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transfer_butActionPerformed(evt);
            }
        });

        back_butt.setBackground(new java.awt.Color(0, 51, 204));
        back_butt.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        back_butt.setForeground(new java.awt.Color(255, 255, 255));
        back_butt.setText("BACK TO MENU");
        back_butt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_buttActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(delete_but)
                        .addGap(33, 33, 33)
                        .addComponent(transfer_but, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(back_butt)))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(delete_but, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(transfer_but, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(51, 51, 51)
                        .addComponent(back_butt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>                        

    private void delete_butActionPerformed(java.awt.event.ActionEvent evt) {
        // Prompt the user to enter the ID to delete
        String idToDelete = JOptionPane.showInputDialog(this, "Enter the ID number to delete:");

        if (idToDelete != null && !idToDelete.trim().isEmpty()) {
            // Trim the input to remove extra spaces
            idToDelete = idToDelete.trim();

            // Check if the ID exists in the file
            boolean idExists = checkIfIdExists(idToDelete);

            if (idExists) {
                // Prompt the user to enter the admin password
                String adminPassword = JOptionPane.showInputDialog(this, "Enter the admin password:");

                // Verify the admin password (assuming the password is "admin123")
                if ("1234".equals(adminPassword)) {
                    // Attempt to delete the record with the specified ID and save it to DELETED_DB.txt
                    boolean deleted = deleteRecordById(idToDelete);

                    if (deleted) {
                        JOptionPane.showMessageDialog(this, "Record deleted successfully !!");
                    } else {
                        JOptionPane.showMessageDialog(this, "Error: Could not delete the record.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Incorrect admin password.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "ID not found in the database.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Invalid ID entered.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private boolean checkIfIdExists(String idToDelete) {
        String filePath = "C:\\PIMS\\CURRENT_DB.txt"; // Correct file path

        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String currentLine;

            // Read the file line by line
            while ((currentLine = reader.readLine()) != null) {
                currentLine = currentLine.trim(); // Remove extra spaces

                // Check if the line starts with "ID:"
                if (currentLine.startsWith("ID:")) {
                    // Extract the ID from the line
                    String currentId = currentLine.substring(4).trim(); // Remove "ID:" and trim spaces

                    // Compare the ID with the one to delete
                    if (currentId.equals(idToDelete)) {
                        return true; // ID found
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: Unable to access the database file.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        // ID not found in the file
        return false;
    }

    private boolean deleteRecordById(String idToDelete) {
        String filePath = "C:\\PIMS\\CURRENT_DB.txt"; // Correct file path for the main database
        String tempFilePath = "C:\\PIMS\\tempDB.txt"; // Temporary file path
        String deletedDbFilePath = "C:\\PIMS\\DELETED_DB.txt"; // Correct file path for DELETED_DB.txt
        boolean deleted = false;

        try (BufferedReader reader = new BufferedReader(new FileReader(filePath));
             BufferedWriter writer = new BufferedWriter(new FileWriter(tempFilePath));
             BufferedWriter deletedDbWriter = new BufferedWriter(new FileWriter(deletedDbFilePath, true))) { // Append to DELETED_DB.txt

            String currentLine;
            boolean isRecordToDelete = false; // To track if the current record is the one to delete
            StringBuilder deletedRecord = new StringBuilder(); // To store the deleted record

            // Read the file line by line
            while ((currentLine = reader.readLine()) != null) {
                currentLine = currentLine.trim(); // Remove extra spaces

                // Check if the line starts with "ID:"
                if (currentLine.startsWith("ID:")) {
                    // Extract the ID from the line
                    String currentId = currentLine.substring(4).trim(); // Remove "ID:" and trim spaces

                    // Check if this is the record to delete
                    if (currentId.equals(idToDelete)) {
                        isRecordToDelete = true; // Mark this record for deletion
                        deleted = true; // Mark that a record was found and will be deleted
                    } else {
                        isRecordToDelete = false; // This is not the record to delete
                    }
                }

                // If this is the record to delete, append it to the deletedRecord StringBuilder
                if (isRecordToDelete) {
                    deletedRecord.append(currentLine).append(System.getProperty("line.separator"));
                } else {
                    // Write the line to the temp file if it's not part of the record to delete
                    writer.write(currentLine + System.getProperty("line.separator"));
                }
            }

            // Write the deleted record to DELETED_DB.txt
            if (deleted) {
                deletedDbWriter.write(deletedRecord.toString());
                deletedDbWriter.newLine(); // Add a blank line after the record
            }
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: Unable to access the database file.", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        // Replace the original file with the temp file
        if (deleted) {
            try {
                java.nio.file.Files.move(
                    java.nio.file.Paths.get(tempFilePath),
                    java.nio.file.Paths.get(filePath),
                    java.nio.file.StandardCopyOption.REPLACE_EXISTING
                );
            } catch (IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error: Unable to update the database file.", "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }

        return deleted;
    }

   private void transfer_butActionPerformed(java.awt.event.ActionEvent evt) {
    // Prompt the user to enter the ID to transfer
    String idToTransfer = JOptionPane.showInputDialog(this, "Enter the ID number to transfer:");

    if (idToTransfer != null && !idToTransfer.trim().isEmpty()) {
        // Trim the input to remove extra spaces
        idToTransfer = idToTransfer.trim();

        // Check if the ID exists in the file
        boolean idExists = checkIfIdExists(idToTransfer);

        if (idExists) {
            // Prompt the user to enter the admin password
            String adminPassword = JOptionPane.showInputDialog(this, "Enter the admin password:");

            // Verify the admin password (assuming the password is "admin123")
            if ("1234".equals(adminPassword)) {
                // Attempt to transfer the record with the specified ID
                boolean transferred = transferPrisoner(idToTransfer);

                if (transferred) {
                    JOptionPane.showMessageDialog(this, "Prisoner transferred successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Error: Could not transfer the prisoner.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Incorrect admin password.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "ID not found in the database.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "Invalid ID entered.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}

/**
 * Transfers a prisoner by deleting the record from CURRENT_DB.txt and writing it to TRANSFERED_DB.txt.
 *
 * @param idToTransfer The ID of the prisoner to transfer.
 * @return true if the transfer is successful, false otherwise.
 */
private boolean transferPrisoner(String idToTransfer) {
    String currentDbPath = "C:\\PIMS\\CURRENT_DB.txt"; // Path to the current database file
    String transferredDbPath = "C:\\PIMS\\TRANSFERED_DB.txt"; // Path to the transferred database file
    String tempFilePath = "C:\\PIMS\\tempDB.txt"; // Temporary file path
    boolean transferred = false;

    try (BufferedReader reader = new BufferedReader(new FileReader(currentDbPath));
         BufferedWriter writer = new BufferedWriter(new FileWriter(tempFilePath));
         BufferedWriter transferredDbWriter = new BufferedWriter(new FileWriter(transferredDbPath, true))) { // Append to TRANSFERED_DB.txt

        String line;
        StringBuilder prisonerRecord = new StringBuilder(); // To store the prisoner's record
        boolean isRecordToTransfer = false; // Flag to track if the current record is being transferred

        while ((line = reader.readLine()) != null) {
            line = line.trim(); // Remove extra spaces

            // Check if the line starts with "ID:"
            if (line.startsWith("ID:")) {
                String currentId = line.substring(4).trim(); // Extract the ID

                // Check if this is the record to transfer
                if (currentId.equals(idToTransfer)) {
                    isRecordToTransfer = true; // Mark this record for transfer
                    transferred = true; // Mark that a record was found and will be transferred
                }
            }

            // If this is the record to transfer, append it to the prisonerRecord StringBuilder
            if (isRecordToTransfer) {
                prisonerRecord.append(line).append(System.getProperty("line.separator"));
            } else {
                // Write the line to the temp file if it's not part of the record to transfer
                writer.write(line + System.getProperty("line.separator"));
            }

            // If the line is empty, it indicates the end of a record
            if (line.isEmpty()) {
                if (isRecordToTransfer) {
                    // Write the record to TRANSFERED_DB.txt
                    transferredDbWriter.write(prisonerRecord.toString());
                    transferredDbWriter.newLine(); // Add a blank line after the record
                }
                // Reset variables for the next record
                prisonerRecord = new StringBuilder();
                isRecordToTransfer = false;
            }
        }
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error accessing database files.", "File Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }

    // Replace the original file with the temp file
    if (transferred) {
        try {
            java.nio.file.Files.move(
                java.nio.file.Paths.get(tempFilePath),
                java.nio.file.Paths.get(currentDbPath),
                java.nio.file.StandardCopyOption.REPLACE_EXISTING
            );
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error updating database file.", "File Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    return transferred;
}
      

    private void back_buttActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        MAIN_MENU men = new MAIN_MENU();
        men.setVisible(true);
        this.dispose();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DELETE_OR_TRANSFER_FRAME.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DELETE_OR_TRANSFER_FRAME.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DELETE_OR_TRANSFER_FRAME.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DELETE_OR_TRANSFER_FRAME.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DELETE_OR_TRANSFER_FRAME().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton back_butt;
    private javax.swing.JButton delete_but;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton transfer_but;
    // End of variables declaration                   
}